Optimization variable:
[delta_tI, statesI_0, statesI_1, statesI_2, statesI_3, statesI_4, statesI_5, statesI_6, statesI_7, statesI_8, statesI_9, statesI_10, statesI_11, inputsI_0, inputsI_1, inputsI_2, virtual_inputsI_0, virtual_inputsI_1, virtual_inputsI_2, virtual_inputsI_3, virtual_inputsI_4, virtual_inputsI_5, insect_state_0, insect_state_1, insect_state_2, insect_state_3, insect_state_4, insect_state_5, insect_state_6, insect_state_7, insect_state_8, insect_state_9, insect_state_10, insect_state_11]
Parameters:
[]
Lagrange multiplier constraints:
[lamg_0, lamg_1, lamg_2, lamg_3, lamg_4, lamg_5, lamg_6, lamg_7, lamg_8, lamg_9, lamg_10, lamg_11, lamg_12, lamg_13, lamg_14]
Objectives jacobian:
 (0, 0) -> 1
 (0, 16) -> (1e+13*(virtual_inputsI_0+virtual_inputsI_0))
 (0, 17) -> (1e+13*(virtual_inputsI_1+virtual_inputsI_1))
 (0, 18) -> (1e+13*(virtual_inputsI_2+virtual_inputsI_2))
 (0, 19) -> (1e+13*(virtual_inputsI_3+virtual_inputsI_3))
 (0, 20) -> (1e+13*(virtual_inputsI_4+virtual_inputsI_4))
 (0, 21) -> (1e+13*(virtual_inputsI_5+virtual_inputsI_5))
Objectives hessian:
 (0, 0) -> @1=0.5, (((lamg_0*(@1*(inputsI_0+inputsI_0)))+(lamg_1*(@1*(inputsI_1+inputsI_1))))+(lamg_2*(@1*(inputsI_2+inputsI_2))))
 (0, 4) -> lamg_0
 (0, 5) -> lamg_1
 (0, 6) -> lamg_2
 (0, 13) -> ((lamg_0*(0.5*(delta_tI+delta_tI)))+lamg_3)
 (0, 14) -> ((lamg_1*(0.5*(delta_tI+delta_tI)))+lamg_4)
 (0, 15) -> ((lamg_2*(0.5*(delta_tI+delta_tI)))+lamg_5)
 (0, 25) -> lamg_6
 (0, 26) -> lamg_7
 (0, 27) -> lamg_8
 (4, 0) -> lamg_0
 (5, 0) -> lamg_1
 (6, 0) -> lamg_2
 (13, 0) -> ((lamg_0*(0.5*(delta_tI+delta_tI)))+lamg_3)
 (14, 0) -> ((lamg_1*(0.5*(delta_tI+delta_tI)))+lamg_4)
 (15, 0) -> ((lamg_2*(0.5*(delta_tI+delta_tI)))+lamg_5)
 (16, 16) -> 2e+13
 (17, 17) -> 2e+13
 (18, 18) -> 2e+13
 (19, 19) -> 2e+13
 (20, 20) -> 2e+13
 (21, 21) -> 2e+13
 (25, 0) -> lamg_6
 (26, 0) -> lamg_7
 (27, 0) -> lamg_8
Constraints:
@1=2, [(((statesI_0+((delta_tI*(statesI_3+(statesI_3+(delta_tI*inputsI_0))))/@1))-statesI_6)+virtual_inputsI_0), (((statesI_1+((delta_tI*(statesI_4+(statesI_4+(delta_tI*inputsI_1))))/@1))-statesI_7)+virtual_inputsI_1), (((statesI_2+((delta_tI*(statesI_5+(statesI_5+(delta_tI*inputsI_2))))/@1))-statesI_8)+virtual_inputsI_2), (((statesI_3+((delta_tI*(inputsI_0+inputsI_0))/@1))-statesI_9)+virtual_inputsI_3), (((statesI_4+((delta_tI*(inputsI_1+inputsI_1))/@1))-statesI_10)+virtual_inputsI_4), (((statesI_5+((delta_tI*(inputsI_2+inputsI_2))/@1))-statesI_11)+virtual_inputsI_5), ((insect_state_0+((delta_tI*(insect_state_3+insect_state_3))/@1))-insect_state_6), ((insect_state_1+((delta_tI*(insect_state_4+insect_state_4))/@1))-insect_state_7), ((insect_state_2+((delta_tI*(insect_state_5+insect_state_5))/@1))-insect_state_8), (insect_state_3-insect_state_9), (insect_state_4-insect_state_10), (insect_state_5-insect_state_11), (statesI_6-insect_state_6), (statesI_7-insect_state_7), (statesI_8-insect_state_8)]
Constraints jacobian:
 (0, 0) -> (0.5*((statesI_3+(statesI_3+(delta_tI*inputsI_0)))+(delta_tI*inputsI_0)))
 (0, 1) -> 1
 (0, 4) -> delta_tI
 (0, 7) -> -1
 (0, 13) -> (0.5*sq(delta_tI))
 (0, 16) -> 1
 (1, 0) -> (0.5*((statesI_4+(statesI_4+(delta_tI*inputsI_1)))+(delta_tI*inputsI_1)))
 (1, 2) -> 1
 (1, 5) -> delta_tI
 (1, 8) -> -1
 (1, 14) -> (0.5*sq(delta_tI))
 (1, 17) -> 1
 (2, 0) -> (0.5*((statesI_5+(statesI_5+(delta_tI*inputsI_2)))+(delta_tI*inputsI_2)))
 (2, 3) -> 1
 (2, 6) -> delta_tI
 (2, 9) -> -1
 (2, 15) -> (0.5*sq(delta_tI))
 (2, 18) -> 1
 (3, 0) -> (0.5*(inputsI_0+inputsI_0))
 (3, 4) -> 1
 (3, 10) -> -1
 (3, 13) -> delta_tI
 (3, 19) -> 1
 (4, 0) -> (0.5*(inputsI_1+inputsI_1))
 (4, 5) -> 1
 (4, 11) -> -1
 (4, 14) -> delta_tI
 (4, 20) -> 1
 (5, 0) -> (0.5*(inputsI_2+inputsI_2))
 (5, 6) -> 1
 (5, 12) -> -1
 (5, 15) -> delta_tI
 (5, 21) -> 1
 (6, 0) -> (0.5*(insect_state_3+insect_state_3))
 (6, 22) -> 1
 (6, 25) -> delta_tI
 (6, 28) -> -1
 (7, 0) -> (0.5*(insect_state_4+insect_state_4))
 (7, 23) -> 1
 (7, 26) -> delta_tI
 (7, 29) -> -1
 (8, 0) -> (0.5*(insect_state_5+insect_state_5))
 (8, 24) -> 1
 (8, 27) -> delta_tI
 (8, 30) -> -1
 (9, 25) -> 1
 (9, 31) -> -1
 (10, 26) -> 1
 (10, 32) -> -1
 (11, 27) -> 1
 (11, 33) -> -1
 (12, 7) -> 1
 (12, 28) -> -1
 (13, 8) -> 1
 (13, 29) -> -1
 (14, 9) -> 1
 (14, 30) -> -1
CX0-dCX0:
@1=(statesI_3+(statesI_3+(delta_tI*inputsI_0))), @2=2, @3=0.5, @4=(statesI_4+(statesI_4+(delta_tI*inputsI_1))), @5=(statesI_5+(statesI_5+(delta_tI*inputsI_2))), @6=(inputsI_0+inputsI_0), @7=(inputsI_1+inputsI_1), @8=(inputsI_2+inputsI_2), @9=(insect_state_3+insect_state_3), @10=(insect_state_4+insect_state_4), @11=(insect_state_5+insect_state_5), @12=0, [((((statesI_0+((delta_tI*@1)/@2))-statesI_6)+virtual_inputsI_0)-(((((((@3*(@1+(delta_tI*inputsI_0)))*delta_tI)+statesI_0)+(delta_tI*statesI_3))-statesI_6)+((@3*sq(delta_tI))*inputsI_0))+virtual_inputsI_0)), ((((statesI_1+((delta_tI*@4)/@2))-statesI_7)+virtual_inputsI_1)-(((((((@3*(@4+(delta_tI*inputsI_1)))*delta_tI)+statesI_1)+(delta_tI*statesI_4))-statesI_7)+((@3*sq(delta_tI))*inputsI_1))+virtual_inputsI_1)), ((((statesI_2+((delta_tI*@5)/@2))-statesI_8)+virtual_inputsI_2)-(((((((@3*(@5+(delta_tI*inputsI_2)))*delta_tI)+statesI_2)+(delta_tI*statesI_5))-statesI_8)+((@3*sq(delta_tI))*inputsI_2))+virtual_inputsI_2)), ((((statesI_3+((delta_tI*@6)/@2))-statesI_9)+virtual_inputsI_3)-((((((@3*@6)*delta_tI)+statesI_3)-statesI_9)+(delta_tI*inputsI_0))+virtual_inputsI_3)), ((((statesI_4+((delta_tI*@7)/@2))-statesI_10)+virtual_inputsI_4)-((((((@3*@7)*delta_tI)+statesI_4)-statesI_10)+(delta_tI*inputsI_1))+virtual_inputsI_4)), ((((statesI_5+((delta_tI*@8)/@2))-statesI_11)+virtual_inputsI_5)-((((((@3*@8)*delta_tI)+statesI_5)-statesI_11)+(delta_tI*inputsI_2))+virtual_inputsI_5)), (((insect_state_0+((delta_tI*@9)/@2))-insect_state_6)-(((((@3*@9)*delta_tI)+insect_state_0)+(delta_tI*insect_state_3))-insect_state_6)), (((insect_state_1+((delta_tI*@10)/@2))-insect_state_7)-(((((@3*@10)*delta_tI)+insect_state_1)+(delta_tI*insect_state_4))-insect_state_7)), (((insect_state_2+((delta_tI*@11)/@2))-insect_state_8)-(((((@3*@11)*delta_tI)+insect_state_2)+(delta_tI*insect_state_5))-insect_state_8)), @12, @12, @12, @12, @12, @12]
