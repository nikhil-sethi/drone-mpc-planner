#include "intercept_in_planes_quadratic_optimizer.h"

void InterceptInPlanesQuadraticOptimizer::init() {
    solver = new SQProblem(85, 47);

    Options options;
    options.setToMPC();
    options.printLevel = PL_NONE;
    options.enableRegularisation = BT_TRUE;
    Eigen::VectorXd xopt = Eigen::VectorXd(85);

    solver->setOptions(options);
    memset(H, 0, sizeof(H));
    Eigen::VectorXd lamg = Eigen::VectorXd(47).setZero();
    H[0] = (((lamg[0]*(0.5*(xopt[13]+xopt[13])))+(lamg[1]*(0.5*(xopt[14]+xopt[14]))))+(lamg[2]*(0.5*(xopt[15]+xopt[15]))));
    H[4] = lamg[0];
    H[5] = lamg[1];
    H[6] = lamg[2];
    H[13] = ((lamg[0]*(0.5*(xopt[0]+xopt[0])))+lamg[3]);
    H[14] = ((lamg[1]*(0.5*(xopt[0]+xopt[0])))+lamg[4]);
    H[15] = ((lamg[2]*(0.5*(xopt[0]+xopt[0])))+lamg[5]);
    H[35] = lamg[6];
    H[36] = lamg[7];
    H[37] = lamg[8];
    H[340] = lamg[0];
    H[425] = lamg[1];
    H[510] = lamg[2];
    H[1105] = ((lamg[0]*(0.5*(xopt[0]+xopt[0])))+lamg[3]);
    H[1190] = ((lamg[1]*(0.5*(xopt[0]+xopt[0])))+lamg[4]);
    H[1275] = ((lamg[2]*(0.5*(xopt[0]+xopt[0])))+lamg[5]);
    H[1376] = 3.33333e+06;
    H[1462] = 3.33333e+06;
    H[1548] = 3.33333e+06;
    H[1634] = 3.33333e+06;
    H[1720] = 3.33333e+06;
    H[1806] = 3.33333e+06;
    H[1892] = 20;
    H[1978] = 20;
    H[2064] = 20;
    H[2150] = 20;
    H[2236] = 20;
    H[2322] = 20;
    H[2408] = 20;
    H[2494] = 20;
    H[2580] = 20;
    H[2666] = 20;
    H[2975] = lamg[6];
    H[3060] = lamg[7];
    H[3145] = lamg[8];
    H[3784] = (((lamg[21]*(0.5*(xopt[57]+xopt[57])))+(lamg[22]*(0.5*(xopt[58]+xopt[58]))))+(lamg[23]*(0.5*(xopt[59]+xopt[59]))));
    H[3788] = lamg[21];
    H[3789] = lamg[22];
    H[3790] = lamg[23];
    H[3797] = ((lamg[21]*(0.5*(xopt[44]+xopt[44])))+lamg[24]);
    H[3798] = ((lamg[22]*(0.5*(xopt[44]+xopt[44])))+lamg[25]);
    H[3799] = ((lamg[23]*(0.5*(xopt[44]+xopt[44])))+lamg[26]);
    H[4124] = lamg[21];
    H[4209] = lamg[22];
    H[4294] = lamg[23];
    H[4889] = ((lamg[21]*(0.5*(xopt[44]+xopt[44])))+lamg[24]);
    H[4974] = ((lamg[22]*(0.5*(xopt[44]+xopt[44])))+lamg[25]);
    H[5059] = ((lamg[23]*(0.5*(xopt[44]+xopt[44])))+lamg[26]);
    H[5160] = 3.33333e+06;
    H[5246] = 3.33333e+06;
    H[5332] = 3.33333e+06;
    H[5418] = 3.33333e+06;
    H[5504] = 3.33333e+06;
    H[5590] = 3.33333e+06;
    H[5676] = 20;
    H[5762] = 20;
    H[5848] = 20;
    H[5934] = 20;
    H[6020] = 20;
    H[6106] = 20;
    H[6192] = 20;
    H[6278] = 20;
    H[6364] = 20;
    H[6450] = 20;
    H[6536] = 66.6667;
    H[6622] = 66.6667;
    H[6708] = 66.6667;
    H[6794] = 3.33333e+06;
    H[6880] = 3.33333e+06;
    H[6966] = 3.33333e+06;
    H[7052] = 3.33333e+06;
    H[7138] = 3.33333e+06;
    H[7224] = 3.33333e+06;


    memset(g, 0, sizeof(g));
    g[0] = 1;
    g[16] = (1.66667e+06*(xopt[16]+xopt[16]));
    g[17] = (1.66667e+06*(xopt[17]+xopt[17]));
    g[18] = (1.66667e+06*(xopt[18]+xopt[18]));
    g[19] = (1.66667e+06*(xopt[19]+xopt[19]));
    g[20] = (1.66667e+06*(xopt[20]+xopt[20]));
    g[21] = (1.66667e+06*(xopt[21]+xopt[21]));
    g[22] = (10*(xopt[22]+xopt[22]));
    g[23] = (10*(xopt[23]+xopt[23]));
    g[24] = (10*(xopt[24]+xopt[24]));
    g[25] = (10*(xopt[25]+xopt[25]));
    g[26] = (10*(xopt[26]+xopt[26]));
    g[27] = (10*(xopt[27]+xopt[27]));
    g[28] = (10*(xopt[28]+xopt[28]));
    g[29] = (10*(xopt[29]+xopt[29]));
    g[30] = (10*(xopt[30]+xopt[30]));
    g[31] = (10*(xopt[31]+xopt[31]));
    g[44] = 0.001;
    g[60] = (1.66667e+06*(xopt[60]+xopt[60]));
    g[61] = (1.66667e+06*(xopt[61]+xopt[61]));
    g[62] = (1.66667e+06*(xopt[62]+xopt[62]));
    g[63] = (1.66667e+06*(xopt[63]+xopt[63]));
    g[64] = (1.66667e+06*(xopt[64]+xopt[64]));
    g[65] = (1.66667e+06*(xopt[65]+xopt[65]));
    g[66] = (10*(xopt[66]+xopt[66]));
    g[67] = (10*(xopt[67]+xopt[67]));
    g[68] = (10*(xopt[68]+xopt[68]));
    g[69] = (10*(xopt[69]+xopt[69]));
    g[70] = (10*(xopt[70]+xopt[70]));
    g[71] = (10*(xopt[71]+xopt[71]));
    g[72] = (10*(xopt[72]+xopt[72]));
    g[73] = (10*(xopt[73]+xopt[73]));
    g[74] = (10*(xopt[74]+xopt[74]));
    g[75] = (10*(xopt[75]+xopt[75]));
    g[76] = (33.3333*(xopt[76]+xopt[76]));
    g[77] = (33.3333*(xopt[77]+xopt[77]));
    g[78] = (33.3333*(xopt[78]+xopt[78]));
    g[79] = (1.66667e+06*(xopt[79]+xopt[79]));
    g[80] = (1.66667e+06*(xopt[80]+xopt[80]));
    g[81] = (1.66667e+06*(xopt[81]+xopt[81]));
    g[82] = (1.66667e+06*(xopt[82]+xopt[82]));
    g[83] = (1.66667e+06*(xopt[83]+xopt[83]));
    g[84] = (1.66667e+06*(xopt[84]+xopt[84]));


    _H = Eigen::Map<Eigen::Matrix<double, 85, 85, Eigen::RowMajor>>(H);
    _g = Eigen::Map<Eigen::VectorXd>(g, 85);
}


Eigen::VectorXd InterceptInPlanesQuadraticOptimizer::constraints(problem_parameters *prob_params, problem_solution *prev_qpsolution) {
    Eigen::VectorXd xopt = prev_qpsolution->Xopt;
    Eigen::VectorXd param = prob_params->param;
    return constraints(xopt, param);
}

Eigen::VectorXd InterceptInPlanesQuadraticOptimizer::constraints(Eigen::VectorXd xopt, Eigen::VectorXd param [[maybe_unused]]) {
    Eigen::VectorXd constraints = Eigen::VectorXd(47);
    double const1 = 2;
    constraints[0] =  (((xopt[1]+((xopt[0]*(xopt[4]+(xopt[4]+(xopt[0]*xopt[13]))))/const1))-xopt[7])+xopt[16]);
    constraints[1] =  (((xopt[2]+((xopt[0]*(xopt[5]+(xopt[5]+(xopt[0]*xopt[14]))))/const1))-xopt[8])+xopt[17]);
    constraints[2] =  (((xopt[3]+((xopt[0]*(xopt[6]+(xopt[6]+(xopt[0]*xopt[15]))))/const1))-xopt[9])+xopt[18]);
    constraints[3] =  (((xopt[4]+((xopt[0]*(xopt[13]+xopt[13]))/const1))-xopt[10])+xopt[19]);
    constraints[4] =  (((xopt[5]+((xopt[0]*(xopt[14]+xopt[14]))/const1))-xopt[11])+xopt[20]);
    constraints[5] =  (((xopt[6]+((xopt[0]*(xopt[15]+xopt[15]))/const1))-xopt[12])+xopt[21]);
    constraints[6] =  ((xopt[32]+((xopt[0]*(xopt[35]+xopt[35]))/const1))-xopt[38]);
    constraints[7] =  ((xopt[33]+((xopt[0]*(xopt[36]+xopt[36]))/const1))-xopt[39]);
    constraints[8] =  ((xopt[34]+((xopt[0]*(xopt[37]+xopt[37]))/const1))-xopt[40]);
    constraints[9] =  (xopt[35]-xopt[41]);
    constraints[10] =  (xopt[36]-xopt[42]);
    constraints[11] =  (xopt[37]-xopt[43]);
    constraints[12] =  ((xopt[7]-xopt[38])+xopt[76]);
    constraints[13] =  ((xopt[8]-xopt[39])+xopt[77]);
    constraints[14] =  ((xopt[9]-xopt[40])+xopt[78]);
    constraints[15] =  ((xopt[7]-xopt[45])+xopt[79]);
    constraints[16] =  ((xopt[8]-xopt[46])+xopt[80]);
    constraints[17] =  ((xopt[9]-xopt[47])+xopt[81]);
    constraints[18] =  ((xopt[10]-xopt[48])+xopt[82]);
    constraints[19] =  ((xopt[11]-xopt[49])+xopt[83]);
    constraints[20] =  ((xopt[12]-xopt[50])+xopt[84]);
    constraints[21] =  (((xopt[45]+((xopt[44]*(xopt[48]+(xopt[48]+(xopt[44]*xopt[57]))))/const1))-xopt[51])+xopt[60]);
    constraints[22] =  (((xopt[46]+((xopt[44]*(xopt[49]+(xopt[49]+(xopt[44]*xopt[58]))))/const1))-xopt[52])+xopt[61]);
    constraints[23] =  (((xopt[47]+((xopt[44]*(xopt[50]+(xopt[50]+(xopt[44]*xopt[59]))))/const1))-xopt[53])+xopt[62]);
    constraints[24] =  (((xopt[48]+((xopt[44]*(xopt[57]+xopt[57]))/const1))-xopt[54])+xopt[63]);
    constraints[25] =  (((xopt[49]+((xopt[44]*(xopt[58]+xopt[58]))/const1))-xopt[55])+xopt[64]);
    constraints[26] =  (((xopt[50]+((xopt[44]*(xopt[59]+xopt[59]))/const1))-xopt[56])+xopt[65]);
    constraints[27] =  (((param[3]*(xopt[7]-param[0]))+(param[4]*(xopt[8]-param[1])))+(param[5]*(xopt[9]-param[2])));
    constraints[28] =  (((param[9]*(xopt[7]-param[6]))+(param[10]*(xopt[8]-param[7])))+(param[11]*(xopt[9]-param[8])));
    constraints[29] =  (((param[15]*(xopt[7]-param[12]))+(param[16]*(xopt[8]-param[13])))+(param[17]*(xopt[9]-param[14])));
    constraints[30] =  (((param[21]*(xopt[7]-param[18]))+(param[22]*(xopt[8]-param[19])))+(param[23]*(xopt[9]-param[20])));
    constraints[31] =  (((param[27]*(xopt[7]-param[24]))+(param[28]*(xopt[8]-param[25])))+(param[29]*(xopt[9]-param[26])));
    constraints[32] =  (((param[33]*(xopt[7]-param[30]))+(param[34]*(xopt[8]-param[31])))+(param[35]*(xopt[9]-param[32])));
    constraints[33] =  (((param[39]*(xopt[7]-param[36]))+(param[40]*(xopt[8]-param[37])))+(param[41]*(xopt[9]-param[38])));
    constraints[34] =  (((param[45]*(xopt[7]-param[42]))+(param[46]*(xopt[8]-param[43])))+(param[47]*(xopt[9]-param[44])));
    constraints[35] =  (((param[51]*(xopt[7]-param[48]))+(param[52]*(xopt[8]-param[49])))+(param[53]*(xopt[9]-param[50])));
    constraints[36] =  (((param[57]*(xopt[7]-param[54]))+(param[58]*(xopt[8]-param[55])))+(param[59]*(xopt[9]-param[56])));
    constraints[37] =  (((param[3]*(xopt[51]-param[0]))+(param[4]*(xopt[52]-param[1])))+(param[5]*(xopt[53]-param[2])));
    constraints[38] =  (((param[9]*(xopt[51]-param[6]))+(param[10]*(xopt[52]-param[7])))+(param[11]*(xopt[53]-param[8])));
    constraints[39] =  (((param[15]*(xopt[51]-param[12]))+(param[16]*(xopt[52]-param[13])))+(param[17]*(xopt[53]-param[14])));
    constraints[40] =  (((param[21]*(xopt[51]-param[18]))+(param[22]*(xopt[52]-param[19])))+(param[23]*(xopt[53]-param[20])));
    constraints[41] =  (((param[27]*(xopt[51]-param[24]))+(param[28]*(xopt[52]-param[25])))+(param[29]*(xopt[53]-param[26])));
    constraints[42] =  (((param[33]*(xopt[51]-param[30]))+(param[34]*(xopt[52]-param[31])))+(param[35]*(xopt[53]-param[32])));
    constraints[43] =  (((param[39]*(xopt[51]-param[36]))+(param[40]*(xopt[52]-param[37])))+(param[41]*(xopt[53]-param[38])));
    constraints[44] =  (((param[45]*(xopt[51]-param[42]))+(param[46]*(xopt[52]-param[43])))+(param[47]*(xopt[53]-param[44])));
    constraints[45] =  (((param[51]*(xopt[51]-param[48]))+(param[52]*(xopt[52]-param[49])))+(param[53]*(xopt[53]-param[50])));
    constraints[46] =  (((param[57]*(xopt[51]-param[54]))+(param[58]*(xopt[52]-param[55])))+(param[59]*(xopt[53]-param[56])));

    return constraints;
}

Eigen::MatrixXd InterceptInPlanesQuadraticOptimizer::constraint_derivative(problem_parameters *prob_params, problem_solution *prev_qpsolution) {
    Eigen::VectorXd xopt = prev_qpsolution->Xopt;
    Eigen::VectorXd param = prob_params->param;
    Eigen::MatrixXd dconstraints = Eigen::MatrixXd(47, 85);
    dconstraints(0, 0) =  (0.5*((xopt[4]+(xopt[4]+(xopt[0]*xopt[13])))+(xopt[0]*xopt[13])));
    dconstraints(0, 1) =  1;
    dconstraints(0, 4) =  xopt[0];
    dconstraints(0, 7) =  -1;
    dconstraints(0, 13) =  (0.5*sq(xopt[0]));
    dconstraints(0, 16) =  1;
    dconstraints(1, 0) =  (0.5*((xopt[5]+(xopt[5]+(xopt[0]*xopt[14])))+(xopt[0]*xopt[14])));
    dconstraints(1, 2) =  1;
    dconstraints(1, 5) =  xopt[0];
    dconstraints(1, 8) =  -1;
    dconstraints(1, 14) =  (0.5*sq(xopt[0]));
    dconstraints(1, 17) =  1;
    dconstraints(2, 0) =  (0.5*((xopt[6]+(xopt[6]+(xopt[0]*xopt[15])))+(xopt[0]*xopt[15])));
    dconstraints(2, 3) =  1;
    dconstraints(2, 6) =  xopt[0];
    dconstraints(2, 9) =  -1;
    dconstraints(2, 15) =  (0.5*sq(xopt[0]));
    dconstraints(2, 18) =  1;
    dconstraints(3, 0) =  (0.5*(xopt[13]+xopt[13]));
    dconstraints(3, 4) =  1;
    dconstraints(3, 10) =  -1;
    dconstraints(3, 13) =  xopt[0];
    dconstraints(3, 19) =  1;
    dconstraints(4, 0) =  (0.5*(xopt[14]+xopt[14]));
    dconstraints(4, 5) =  1;
    dconstraints(4, 11) =  -1;
    dconstraints(4, 14) =  xopt[0];
    dconstraints(4, 20) =  1;
    dconstraints(5, 0) =  (0.5*(xopt[15]+xopt[15]));
    dconstraints(5, 6) =  1;
    dconstraints(5, 12) =  -1;
    dconstraints(5, 15) =  xopt[0];
    dconstraints(5, 21) =  1;
    dconstraints(6, 0) =  (0.5*(xopt[35]+xopt[35]));
    dconstraints(6, 32) =  1;
    dconstraints(6, 35) =  xopt[0];
    dconstraints(6, 38) =  -1;
    dconstraints(7, 0) =  (0.5*(xopt[36]+xopt[36]));
    dconstraints(7, 33) =  1;
    dconstraints(7, 36) =  xopt[0];
    dconstraints(7, 39) =  -1;
    dconstraints(8, 0) =  (0.5*(xopt[37]+xopt[37]));
    dconstraints(8, 34) =  1;
    dconstraints(8, 37) =  xopt[0];
    dconstraints(8, 40) =  -1;
    dconstraints(9, 35) =  1;
    dconstraints(9, 41) =  -1;
    dconstraints(10, 36) =  1;
    dconstraints(10, 42) =  -1;
    dconstraints(11, 37) =  1;
    dconstraints(11, 43) =  -1;
    dconstraints(12, 7) =  1;
    dconstraints(12, 38) =  -1;
    dconstraints(12, 76) =  1;
    dconstraints(13, 8) =  1;
    dconstraints(13, 39) =  -1;
    dconstraints(13, 77) =  1;
    dconstraints(14, 9) =  1;
    dconstraints(14, 40) =  -1;
    dconstraints(14, 78) =  1;
    dconstraints(15, 7) =  1;
    dconstraints(15, 45) =  -1;
    dconstraints(15, 79) =  1;
    dconstraints(16, 8) =  1;
    dconstraints(16, 46) =  -1;
    dconstraints(16, 80) =  1;
    dconstraints(17, 9) =  1;
    dconstraints(17, 47) =  -1;
    dconstraints(17, 81) =  1;
    dconstraints(18, 10) =  1;
    dconstraints(18, 48) =  -1;
    dconstraints(18, 82) =  1;
    dconstraints(19, 11) =  1;
    dconstraints(19, 49) =  -1;
    dconstraints(19, 83) =  1;
    dconstraints(20, 12) =  1;
    dconstraints(20, 50) =  -1;
    dconstraints(20, 84) =  1;
    dconstraints(21, 44) =  (0.5*((xopt[48]+(xopt[48]+(xopt[44]*xopt[57])))+(xopt[44]*xopt[57])));
    dconstraints(21, 45) =  1;
    dconstraints(21, 48) =  xopt[44];
    dconstraints(21, 51) =  -1;
    dconstraints(21, 57) =  (0.5*sq(xopt[44]));
    dconstraints(21, 60) =  1;
    dconstraints(22, 44) =  (0.5*((xopt[49]+(xopt[49]+(xopt[44]*xopt[58])))+(xopt[44]*xopt[58])));
    dconstraints(22, 46) =  1;
    dconstraints(22, 49) =  xopt[44];
    dconstraints(22, 52) =  -1;
    dconstraints(22, 58) =  (0.5*sq(xopt[44]));
    dconstraints(22, 61) =  1;
    dconstraints(23, 44) =  (0.5*((xopt[50]+(xopt[50]+(xopt[44]*xopt[59])))+(xopt[44]*xopt[59])));
    dconstraints(23, 47) =  1;
    dconstraints(23, 50) =  xopt[44];
    dconstraints(23, 53) =  -1;
    dconstraints(23, 59) =  (0.5*sq(xopt[44]));
    dconstraints(23, 62) =  1;
    dconstraints(24, 44) =  (0.5*(xopt[57]+xopt[57]));
    dconstraints(24, 48) =  1;
    dconstraints(24, 54) =  -1;
    dconstraints(24, 57) =  xopt[44];
    dconstraints(24, 63) =  1;
    dconstraints(25, 44) =  (0.5*(xopt[58]+xopt[58]));
    dconstraints(25, 49) =  1;
    dconstraints(25, 55) =  -1;
    dconstraints(25, 58) =  xopt[44];
    dconstraints(25, 64) =  1;
    dconstraints(26, 44) =  (0.5*(xopt[59]+xopt[59]));
    dconstraints(26, 50) =  1;
    dconstraints(26, 56) =  -1;
    dconstraints(26, 59) =  xopt[44];
    dconstraints(26, 65) =  1;
    dconstraints(27, 7) =  param[3];
    dconstraints(27, 8) =  param[4];
    dconstraints(27, 9) =  param[5];
    dconstraints(28, 7) =  param[9];
    dconstraints(28, 8) =  param[10];
    dconstraints(28, 9) =  param[11];
    dconstraints(29, 7) =  param[15];
    dconstraints(29, 8) =  param[16];
    dconstraints(29, 9) =  param[17];
    dconstraints(30, 7) =  param[21];
    dconstraints(30, 8) =  param[22];
    dconstraints(30, 9) =  param[23];
    dconstraints(31, 7) =  param[27];
    dconstraints(31, 8) =  param[28];
    dconstraints(31, 9) =  param[29];
    dconstraints(32, 7) =  param[33];
    dconstraints(32, 8) =  param[34];
    dconstraints(32, 9) =  param[35];
    dconstraints(33, 7) =  param[39];
    dconstraints(33, 8) =  param[40];
    dconstraints(33, 9) =  param[41];
    dconstraints(34, 7) =  param[45];
    dconstraints(34, 8) =  param[46];
    dconstraints(34, 9) =  param[47];
    dconstraints(35, 7) =  param[51];
    dconstraints(35, 8) =  param[52];
    dconstraints(35, 9) =  param[53];
    dconstraints(36, 7) =  param[57];
    dconstraints(36, 8) =  param[58];
    dconstraints(36, 9) =  param[59];
    dconstraints(37, 51) =  param[3];
    dconstraints(37, 52) =  param[4];
    dconstraints(37, 53) =  param[5];
    dconstraints(38, 51) =  param[9];
    dconstraints(38, 52) =  param[10];
    dconstraints(38, 53) =  param[11];
    dconstraints(39, 51) =  param[15];
    dconstraints(39, 52) =  param[16];
    dconstraints(39, 53) =  param[17];
    dconstraints(40, 51) =  param[21];
    dconstraints(40, 52) =  param[22];
    dconstraints(40, 53) =  param[23];
    dconstraints(41, 51) =  param[27];
    dconstraints(41, 52) =  param[28];
    dconstraints(41, 53) =  param[29];
    dconstraints(42, 51) =  param[33];
    dconstraints(42, 52) =  param[34];
    dconstraints(42, 53) =  param[35];
    dconstraints(43, 51) =  param[39];
    dconstraints(43, 52) =  param[40];
    dconstraints(43, 53) =  param[41];
    dconstraints(44, 51) =  param[45];
    dconstraints(44, 52) =  param[46];
    dconstraints(44, 53) =  param[47];
    dconstraints(45, 51) =  param[51];
    dconstraints(45, 52) =  param[52];
    dconstraints(45, 53) =  param[53];
    dconstraints(46, 51) =  param[57];
    dconstraints(46, 52) =  param[58];
    dconstraints(46, 53) =  param[59];

    return dconstraints;
}

void InterceptInPlanesQuadraticOptimizer::update_matrix_H(problem_parameters *prob_params, problem_solution *prev_qpsolution) {
    Eigen::VectorXd xopt = prev_qpsolution->Xopt;
    Eigen::VectorXd param = prob_params->param;
    Eigen::VectorXd lamg = prev_qpsolution->lagrange_multiplier;

    H[0] = (((lamg[0]*(0.5*(xopt[13]+xopt[13])))+(lamg[1]*(0.5*(xopt[14]+xopt[14]))))+(lamg[2]*(0.5*(xopt[15]+xopt[15]))));
    H[4] = lamg[0];
    H[5] = lamg[1];
    H[6] = lamg[2];
    H[13] = ((lamg[0]*(0.5*(xopt[0]+xopt[0])))+lamg[3]);
    H[14] = ((lamg[1]*(0.5*(xopt[0]+xopt[0])))+lamg[4]);
    H[15] = ((lamg[2]*(0.5*(xopt[0]+xopt[0])))+lamg[5]);
    H[35] = lamg[6];
    H[36] = lamg[7];
    H[37] = lamg[8];
    H[340] = lamg[0];
    H[425] = lamg[1];
    H[510] = lamg[2];
    H[1105] = ((lamg[0]*(0.5*(xopt[0]+xopt[0])))+lamg[3]);
    H[1190] = ((lamg[1]*(0.5*(xopt[0]+xopt[0])))+lamg[4]);
    H[1275] = ((lamg[2]*(0.5*(xopt[0]+xopt[0])))+lamg[5]);
    H[1376] = 3.33333e+06;
    H[1462] = 3.33333e+06;
    H[1548] = 3.33333e+06;
    H[1634] = 3.33333e+06;
    H[1720] = 3.33333e+06;
    H[1806] = 3.33333e+06;
    H[1892] = 20;
    H[1978] = 20;
    H[2064] = 20;
    H[2150] = 20;
    H[2236] = 20;
    H[2322] = 20;
    H[2408] = 20;
    H[2494] = 20;
    H[2580] = 20;
    H[2666] = 20;
    H[2975] = lamg[6];
    H[3060] = lamg[7];
    H[3145] = lamg[8];
    H[3784] = (((lamg[21]*(0.5*(xopt[57]+xopt[57])))+(lamg[22]*(0.5*(xopt[58]+xopt[58]))))+(lamg[23]*(0.5*(xopt[59]+xopt[59]))));
    H[3788] = lamg[21];
    H[3789] = lamg[22];
    H[3790] = lamg[23];
    H[3797] = ((lamg[21]*(0.5*(xopt[44]+xopt[44])))+lamg[24]);
    H[3798] = ((lamg[22]*(0.5*(xopt[44]+xopt[44])))+lamg[25]);
    H[3799] = ((lamg[23]*(0.5*(xopt[44]+xopt[44])))+lamg[26]);
    H[4124] = lamg[21];
    H[4209] = lamg[22];
    H[4294] = lamg[23];
    H[4889] = ((lamg[21]*(0.5*(xopt[44]+xopt[44])))+lamg[24]);
    H[4974] = ((lamg[22]*(0.5*(xopt[44]+xopt[44])))+lamg[25]);
    H[5059] = ((lamg[23]*(0.5*(xopt[44]+xopt[44])))+lamg[26]);
    H[5160] = 3.33333e+06;
    H[5246] = 3.33333e+06;
    H[5332] = 3.33333e+06;
    H[5418] = 3.33333e+06;
    H[5504] = 3.33333e+06;
    H[5590] = 3.33333e+06;
    H[5676] = 20;
    H[5762] = 20;
    H[5848] = 20;
    H[5934] = 20;
    H[6020] = 20;
    H[6106] = 20;
    H[6192] = 20;
    H[6278] = 20;
    H[6364] = 20;
    H[6450] = 20;
    H[6536] = 66.6667;
    H[6622] = 66.6667;
    H[6708] = 66.6667;
    H[6794] = 3.33333e+06;
    H[6880] = 3.33333e+06;
    H[6966] = 3.33333e+06;
    H[7052] = 3.33333e+06;
    H[7138] = 3.33333e+06;
    H[7224] = 3.33333e+06;

}

void InterceptInPlanesQuadraticOptimizer::update_vector_g(problem_parameters *prob_params, problem_solution *prev_qpsolution) {
    Eigen::VectorXd xopt = prev_qpsolution->Xopt;
    Eigen::VectorXd param = prob_params->param;

    g[0] = 1;
    g[16] = (1.66667e+06*(xopt[16]+xopt[16]));
    g[17] = (1.66667e+06*(xopt[17]+xopt[17]));
    g[18] = (1.66667e+06*(xopt[18]+xopt[18]));
    g[19] = (1.66667e+06*(xopt[19]+xopt[19]));
    g[20] = (1.66667e+06*(xopt[20]+xopt[20]));
    g[21] = (1.66667e+06*(xopt[21]+xopt[21]));
    g[22] = (10*(xopt[22]+xopt[22]));
    g[23] = (10*(xopt[23]+xopt[23]));
    g[24] = (10*(xopt[24]+xopt[24]));
    g[25] = (10*(xopt[25]+xopt[25]));
    g[26] = (10*(xopt[26]+xopt[26]));
    g[27] = (10*(xopt[27]+xopt[27]));
    g[28] = (10*(xopt[28]+xopt[28]));
    g[29] = (10*(xopt[29]+xopt[29]));
    g[30] = (10*(xopt[30]+xopt[30]));
    g[31] = (10*(xopt[31]+xopt[31]));
    g[44] = 0.001;
    g[60] = (1.66667e+06*(xopt[60]+xopt[60]));
    g[61] = (1.66667e+06*(xopt[61]+xopt[61]));
    g[62] = (1.66667e+06*(xopt[62]+xopt[62]));
    g[63] = (1.66667e+06*(xopt[63]+xopt[63]));
    g[64] = (1.66667e+06*(xopt[64]+xopt[64]));
    g[65] = (1.66667e+06*(xopt[65]+xopt[65]));
    g[66] = (10*(xopt[66]+xopt[66]));
    g[67] = (10*(xopt[67]+xopt[67]));
    g[68] = (10*(xopt[68]+xopt[68]));
    g[69] = (10*(xopt[69]+xopt[69]));
    g[70] = (10*(xopt[70]+xopt[70]));
    g[71] = (10*(xopt[71]+xopt[71]));
    g[72] = (10*(xopt[72]+xopt[72]));
    g[73] = (10*(xopt[73]+xopt[73]));
    g[74] = (10*(xopt[74]+xopt[74]));
    g[75] = (10*(xopt[75]+xopt[75]));
    g[76] = (33.3333*(xopt[76]+xopt[76]));
    g[77] = (33.3333*(xopt[77]+xopt[77]));
    g[78] = (33.3333*(xopt[78]+xopt[78]));
    g[79] = (1.66667e+06*(xopt[79]+xopt[79]));
    g[80] = (1.66667e+06*(xopt[80]+xopt[80]));
    g[81] = (1.66667e+06*(xopt[81]+xopt[81]));
    g[82] = (1.66667e+06*(xopt[82]+xopt[82]));
    g[83] = (1.66667e+06*(xopt[83]+xopt[83]));
    g[84] = (1.66667e+06*(xopt[84]+xopt[84]));

}

void InterceptInPlanesQuadraticOptimizer::update_matrix_A(problem_parameters *prob_params, problem_solution *prev_qpsolution) {
    Eigen::VectorXd xopt = prev_qpsolution->Xopt;
    Eigen::VectorXd param = prob_params->param;

    A[0] =  (0.5*((xopt[4]+(xopt[4]+(xopt[0]*xopt[13])))+(xopt[0]*xopt[13])));
    A[1] =  1;
    A[4] =  xopt[0];
    A[7] =  -1;
    A[13] =  (0.5*sq(xopt[0]));
    A[16] =  1;
    A[85] =  (0.5*((xopt[5]+(xopt[5]+(xopt[0]*xopt[14])))+(xopt[0]*xopt[14])));
    A[87] =  1;
    A[90] =  xopt[0];
    A[93] =  -1;
    A[99] =  (0.5*sq(xopt[0]));
    A[102] =  1;
    A[170] =  (0.5*((xopt[6]+(xopt[6]+(xopt[0]*xopt[15])))+(xopt[0]*xopt[15])));
    A[173] =  1;
    A[176] =  xopt[0];
    A[179] =  -1;
    A[185] =  (0.5*sq(xopt[0]));
    A[188] =  1;
    A[255] =  (0.5*(xopt[13]+xopt[13]));
    A[259] =  1;
    A[265] =  -1;
    A[268] =  xopt[0];
    A[274] =  1;
    A[340] =  (0.5*(xopt[14]+xopt[14]));
    A[345] =  1;
    A[351] =  -1;
    A[354] =  xopt[0];
    A[360] =  1;
    A[425] =  (0.5*(xopt[15]+xopt[15]));
    A[431] =  1;
    A[437] =  -1;
    A[440] =  xopt[0];
    A[446] =  1;
    A[510] =  (0.5*(xopt[35]+xopt[35]));
    A[542] =  1;
    A[545] =  xopt[0];
    A[548] =  -1;
    A[595] =  (0.5*(xopt[36]+xopt[36]));
    A[628] =  1;
    A[631] =  xopt[0];
    A[634] =  -1;
    A[680] =  (0.5*(xopt[37]+xopt[37]));
    A[714] =  1;
    A[717] =  xopt[0];
    A[720] =  -1;
    A[800] =  1;
    A[806] =  -1;
    A[886] =  1;
    A[892] =  -1;
    A[972] =  1;
    A[978] =  -1;
    A[1027] =  1;
    A[1058] =  -1;
    A[1096] =  1;
    A[1113] =  1;
    A[1144] =  -1;
    A[1182] =  1;
    A[1199] =  1;
    A[1230] =  -1;
    A[1268] =  1;
    A[1282] =  1;
    A[1320] =  -1;
    A[1354] =  1;
    A[1368] =  1;
    A[1406] =  -1;
    A[1440] =  1;
    A[1454] =  1;
    A[1492] =  -1;
    A[1526] =  1;
    A[1540] =  1;
    A[1578] =  -1;
    A[1612] =  1;
    A[1626] =  1;
    A[1664] =  -1;
    A[1698] =  1;
    A[1712] =  1;
    A[1750] =  -1;
    A[1784] =  1;
    A[1829] =  (0.5*((xopt[48]+(xopt[48]+(xopt[44]*xopt[57])))+(xopt[44]*xopt[57])));
    A[1830] =  1;
    A[1833] =  xopt[44];
    A[1836] =  -1;
    A[1842] =  (0.5*sq(xopt[44]));
    A[1845] =  1;
    A[1914] =  (0.5*((xopt[49]+(xopt[49]+(xopt[44]*xopt[58])))+(xopt[44]*xopt[58])));
    A[1916] =  1;
    A[1919] =  xopt[44];
    A[1922] =  -1;
    A[1928] =  (0.5*sq(xopt[44]));
    A[1931] =  1;
    A[1999] =  (0.5*((xopt[50]+(xopt[50]+(xopt[44]*xopt[59])))+(xopt[44]*xopt[59])));
    A[2002] =  1;
    A[2005] =  xopt[44];
    A[2008] =  -1;
    A[2014] =  (0.5*sq(xopt[44]));
    A[2017] =  1;
    A[2084] =  (0.5*(xopt[57]+xopt[57]));
    A[2088] =  1;
    A[2094] =  -1;
    A[2097] =  xopt[44];
    A[2103] =  1;
    A[2169] =  (0.5*(xopt[58]+xopt[58]));
    A[2174] =  1;
    A[2180] =  -1;
    A[2183] =  xopt[44];
    A[2189] =  1;
    A[2254] =  (0.5*(xopt[59]+xopt[59]));
    A[2260] =  1;
    A[2266] =  -1;
    A[2269] =  xopt[44];
    A[2275] =  1;
    A[2302] =  param[3];
    A[2303] =  param[4];
    A[2304] =  param[5];
    A[2387] =  param[9];
    A[2388] =  param[10];
    A[2389] =  param[11];
    A[2472] =  param[15];
    A[2473] =  param[16];
    A[2474] =  param[17];
    A[2557] =  param[21];
    A[2558] =  param[22];
    A[2559] =  param[23];
    A[2642] =  param[27];
    A[2643] =  param[28];
    A[2644] =  param[29];
    A[2727] =  param[33];
    A[2728] =  param[34];
    A[2729] =  param[35];
    A[2812] =  param[39];
    A[2813] =  param[40];
    A[2814] =  param[41];
    A[2897] =  param[45];
    A[2898] =  param[46];
    A[2899] =  param[47];
    A[2982] =  param[51];
    A[2983] =  param[52];
    A[2984] =  param[53];
    A[3067] =  param[57];
    A[3068] =  param[58];
    A[3069] =  param[59];
    A[3196] =  param[3];
    A[3197] =  param[4];
    A[3198] =  param[5];
    A[3281] =  param[9];
    A[3282] =  param[10];
    A[3283] =  param[11];
    A[3366] =  param[15];
    A[3367] =  param[16];
    A[3368] =  param[17];
    A[3451] =  param[21];
    A[3452] =  param[22];
    A[3453] =  param[23];
    A[3536] =  param[27];
    A[3537] =  param[28];
    A[3538] =  param[29];
    A[3621] =  param[33];
    A[3622] =  param[34];
    A[3623] =  param[35];
    A[3706] =  param[39];
    A[3707] =  param[40];
    A[3708] =  param[41];
    A[3791] =  param[45];
    A[3792] =  param[46];
    A[3793] =  param[47];
    A[3876] =  param[51];
    A[3877] =  param[52];
    A[3878] =  param[53];
    A[3961] =  param[57];
    A[3962] =  param[58];
    A[3963] =  param[59];

}

void InterceptInPlanesQuadraticOptimizer::update_vectors_bA(problem_parameters *prob_params[[maybe_unused]], problem_solution *prev_qpsolution) {
    // Eigen::VectorXd xopt = prev_qpsolution->Xopt;
    // Eigen::VectorXd param = prob_params->param;
    Eigen::VectorXd lbg = prob_params->lbg;
    Eigen::VectorXd ubg = prob_params->ubg;

    lbA[0] = lbg[0];
    lbA[1] = lbg[1];
    lbA[2] = lbg[2];
    lbA[3] = lbg[3];
    lbA[4] = lbg[4];
    lbA[5] = lbg[5];
    lbA[6] = lbg[6];
    lbA[7] = lbg[7];
    lbA[8] = lbg[8];
    lbA[9] = lbg[9];
    lbA[10] = lbg[10];
    lbA[11] = lbg[11];
    lbA[12] = lbg[12];
    lbA[13] = lbg[13];
    lbA[14] = lbg[14];
    lbA[15] = lbg[15];
    lbA[16] = lbg[16];
    lbA[17] = lbg[17];
    lbA[18] = lbg[18];
    lbA[19] = lbg[19];
    lbA[20] = lbg[20];
    lbA[21] = lbg[21];
    lbA[22] = lbg[22];
    lbA[23] = lbg[23];
    lbA[24] = lbg[24];
    lbA[25] = lbg[25];
    lbA[26] = lbg[26];
    lbA[27] = lbg[27];
    lbA[28] = lbg[28];
    lbA[29] = lbg[29];
    lbA[30] = lbg[30];
    lbA[31] = lbg[31];
    lbA[32] = lbg[32];
    lbA[33] = lbg[33];
    lbA[34] = lbg[34];
    lbA[35] = lbg[35];
    lbA[36] = lbg[36];
    lbA[37] = lbg[37];
    lbA[38] = lbg[38];
    lbA[39] = lbg[39];
    lbA[40] = lbg[40];
    lbA[41] = lbg[41];
    lbA[42] = lbg[42];
    lbA[43] = lbg[43];
    lbA[44] = lbg[44];
    lbA[45] = lbg[45];
    lbA[46] = lbg[46];
    ubA[0] = ubg[0];
    ubA[1] = ubg[1];
    ubA[2] = ubg[2];
    ubA[3] = ubg[3];
    ubA[4] = ubg[4];
    ubA[5] = ubg[5];
    ubA[6] = ubg[6];
    ubA[7] = ubg[7];
    ubA[8] = ubg[8];
    ubA[9] = ubg[9];
    ubA[10] = ubg[10];
    ubA[11] = ubg[11];
    ubA[12] = ubg[12];
    ubA[13] = ubg[13];
    ubA[14] = ubg[14];
    ubA[15] = ubg[15];
    ubA[16] = ubg[16];
    ubA[17] = ubg[17];
    ubA[18] = ubg[18];
    ubA[19] = ubg[19];
    ubA[20] = ubg[20];
    ubA[21] = ubg[21];
    ubA[22] = ubg[22];
    ubA[23] = ubg[23];
    ubA[24] = ubg[24];
    ubA[25] = ubg[25];
    ubA[26] = ubg[26];
    ubA[27] = ubg[27];
    ubA[28] = ubg[28];
    ubA[29] = ubg[29];
    ubA[30] = ubg[30];
    ubA[31] = ubg[31];
    ubA[32] = ubg[32];
    ubA[33] = ubg[33];
    ubA[34] = ubg[34];
    ubA[35] = ubg[35];
    ubA[36] = ubg[36];
    ubA[37] = ubg[37];
    ubA[38] = ubg[38];
    ubA[39] = ubg[39];
    ubA[40] = ubg[40];
    ubA[41] = ubg[41];
    ubA[42] = ubg[42];
    ubA[43] = ubg[43];
    ubA[44] = ubg[44];
    ubA[45] = ubg[45];
    ubA[46] = ubg[46];


    for (uint i = 0; i < 47; i++) {
        ubA[i] -= prev_qpsolution->Z[85 + i];
        lbA[i] -= prev_qpsolution->Z[85 + i];
    }
}

void InterceptInPlanesQuadraticOptimizer::update_vectors_bx(problem_parameters *prob_params, problem_solution *prev_qpsolution) {
    for (uint lbxk = 0; lbxk < prob_params->lbx.size(); lbxk++) {
        lb[lbxk] = prob_params->lbx[lbxk] - prev_qpsolution->Xopt[lbxk];
    }

    for (uint ubxk = 0; ubxk < prob_params->ubx.size(); ubxk++) {
        ub[ubxk] = prob_params->ubx[ubxk] - prev_qpsolution->Xopt[ubxk];
    }
}

problem_solution InterceptInPlanesQuadraticOptimizer::solve(problem_parameters *prob_params, bool init, double cpu_time) {
    problem_solution prev_qpsolution(prob_params);
    return solve(prob_params, &prev_qpsolution, init, cpu_time);
}

problem_solution InterceptInPlanesQuadraticOptimizer::solve(problem_parameters *prob_params, problem_solution *prev_qpsolution, bool init, double cpu_time) {
    update_matrix_H(prob_params, prev_qpsolution);
    update_vector_g(prob_params, prev_qpsolution);
    update_matrix_A(prob_params, prev_qpsolution);
    update_vectors_bA(prob_params, prev_qpsolution);
    update_vectors_bx(prob_params, prev_qpsolution);

    int solver_status;
    int nwsr = _nWSR;
    if (cpu_time > 0)
        _cpu_time = &cpu_time;
    else
        _cpu_time = nullptr;

    if (!solver->isInitialised() || init)
        solver_status = solver->init(H, g, A, lb, ub, lbA, ubA, nwsr, _cpu_time);
    else
        solver_status = solver->hotstart(H, g, A, lb, ub, lbA, ubA, nwsr, _cpu_time);

    real_t primal[85];
    solver->getPrimalSolution(primal);
    Eigen::VectorXd xopt = prev_qpsolution->Xopt + Eigen::Map<Eigen::VectorXd>(primal, 85);
    real_t _dual[132];
    solver->getDualSolution(_dual);
    Eigen::VectorXd lagrange_multiplier = -Eigen::Map<Eigen::VectorXd>(&(_dual[85]), 47);

    problem_solution ret = problem_solution(xopt, constraints(xopt, prob_params->param), lagrange_multiplier, solver->getObjVal(), solver_status);
    // print_quadratic_problem_design(*prob_params, ret);
    // print_quadratic_problem(primal, _dual);
    // print_array("H", 85 * 85, H);

    return ret;
}
