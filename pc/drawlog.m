clear all 
close all
%% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/houjebek/code/pats/pc/build-pc-Desktop_Qt_5_9_1_GCC_64bit-Debug/logging/test.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/07/16 16:44:39

%% Initialize variables.
filename = '/home/houjebek/code/pats/pc/build-pc-Desktop_Qt_5_9_1_GCC_64bit-Debug/logging/test.log';
delimiter = ';';

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
ID = cell2mat(raw(:, 1));
RS_ID = cell2mat(raw(:, 2));
imLx = cell2mat(raw(:, 3));
imLy = cell2mat(raw(:, 4));
disparity1 = cell2mat(raw(:, 5));
imLx_is = cell2mat(raw(:, 6));
imLy_is = cell2mat(raw(:, 7));
disparity_is = cell2mat(raw(:, 8));
posX_is = cell2mat(raw(:, 9));
posY_is = cell2mat(raw(:, 10));
posZ_is = cell2mat(raw(:, 11));
valid = cell2mat(raw(:, 12));
posErrX = cell2mat(raw(:, 13));
posErrY = cell2mat(raw(:, 14));
posErrZ = cell2mat(raw(:, 15));
velX = cell2mat(raw(:, 16));
velY = cell2mat(raw(:, 17));
velZ = cell2mat(raw(:, 18));
hoverthrottle = cell2mat(raw(:, 19));
autoThrottle = cell2mat(raw(:, 20));
autoRoll = cell2mat(raw(:, 21));
autoPitch = cell2mat(raw(:, 22));
autoYaw = cell2mat(raw(:, 23));
joyThrottle = cell2mat(raw(:, 24));
joyRoll = cell2mat(raw(:, 25));
joyPitch = cell2mat(raw(:, 26));
joyYaw = cell2mat(raw(:, 27));
joySwitch = cell2mat(raw(:, 28));
throttleP = cell2mat(raw(:, 29));
throttleI = cell2mat(raw(:, 30));
throttleD = cell2mat(raw(:, 31));
dt = cell2mat(raw(:, 32));
dx = cell2mat(raw(:, 33));


%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp R;



pbegin = 500
pend = 3800
plot(posX_is(pbegin:pend),posZ_is(pbegin:pend));
figure;
plot3(posX_is(pbegin:pend),posY_is(pbegin:pend),posZ_is(pbegin:pend))
figure; plot(posY_is(335:1400),posZ_is(335:1400));

%end generated shizzle!!!


% 
% %%derive / calc some stuff:
% A(:,1) = posErrY; 
% A(:,2) = 0;
% A(:,3) = -(autoThrottle - 1580) / (1650 - 1580) - 2.5; %heuristically scaled!
% A(:,4) = joySwitch ; 
% 
% subplot(3,1,1)
% plot(A)
% legend('PosErrY [m]','Pos setpoint','- scaled throttle', 'Stabilization ON')
% subplot(3,1,2)
% hold on
% plot(velY)
% legend('velocity Y')
% subplot(3,1,3)
% plot(hoverthrottle)
% legend('hover throttle')
% 
% figure;
% title positions
% subplot(3,1,1); plot(posErrX); legend('x')
% subplot(3,1,2); plot(posErrY); legend('y')
% subplot(3,1,3); plot(posErrZ); legend('z')
% 
% figure;
% scatter3(posErrX,posErrY,posErrZ)


