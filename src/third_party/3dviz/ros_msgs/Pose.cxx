// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file Pose.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "Pose.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

geometry_msgs::msg::Pose::Pose()
{



}

geometry_msgs::msg::Pose::~Pose()
{
}

geometry_msgs::msg::Pose::Pose(const Pose &x)
{
    m_position = x.m_position;
    m_orientation = x.m_orientation;
}

geometry_msgs::msg::Pose::Pose(Pose &&x)
{
    m_position = std::move(x.m_position);
    m_orientation = std::move(x.m_orientation);
}

geometry_msgs::msg::Pose& geometry_msgs::msg::Pose::operator=(const Pose &x)
{
    m_position = x.m_position;
    m_orientation = x.m_orientation;

    return *this;
}

geometry_msgs::msg::Pose& geometry_msgs::msg::Pose::operator=(Pose &&x)
{
    m_position = std::move(x.m_position);
    m_orientation = std::move(x.m_orientation);

    return *this;
}

size_t geometry_msgs::msg::Pose::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += geometry_msgs::msg::Point::getMaxCdrSerializedSize(current_alignment);
    current_alignment += geometry_msgs::msg::Quaternion::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t geometry_msgs::msg::Pose::getCdrSerializedSize(const geometry_msgs::msg::Pose& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += geometry_msgs::msg::Point::getCdrSerializedSize(data.position(), current_alignment);
    current_alignment += geometry_msgs::msg::Quaternion::getCdrSerializedSize(data.orientation(), current_alignment);

    return current_alignment - initial_alignment;
}

void geometry_msgs::msg::Pose::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_position;
    scdr << m_orientation;
}

void geometry_msgs::msg::Pose::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_position;
    dcdr >> m_orientation;
}

size_t geometry_msgs::msg::Pose::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            



    return current_align;
}

bool geometry_msgs::msg::Pose::isKeyDefined()
{
    return false;
}

void geometry_msgs::msg::Pose::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
}

