// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file Header.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "Header.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

std_msgs::msg::Header::Header()
{



}

std_msgs::msg::Header::~Header()
{
}

std_msgs::msg::Header::Header(const Header &x)
{
    m_stamp = x.m_stamp;
    m_frame_id = x.m_frame_id;
}

std_msgs::msg::Header::Header(Header &&x)
{
    m_stamp = std::move(x.m_stamp);
    m_frame_id = std::move(x.m_frame_id);
}

std_msgs::msg::Header& std_msgs::msg::Header::operator=(const Header &x)
{
    m_stamp = x.m_stamp;
    m_frame_id = x.m_frame_id;

    return *this;
}

std_msgs::msg::Header& std_msgs::msg::Header::operator=(Header &&x)
{
    m_stamp = std::move(x.m_stamp);
    m_frame_id = std::move(x.m_frame_id);

    return *this;
}

size_t std_msgs::msg::Header::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += builtin_interfaces::msg::Time::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t std_msgs::msg::Header::getCdrSerializedSize(const std_msgs::msg::Header& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += builtin_interfaces::msg::Time::getCdrSerializedSize(data.stamp(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_id().size() + 1;


    return current_alignment - initial_alignment;
}

void std_msgs::msg::Header::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_stamp;
    scdr << m_frame_id;
}

void std_msgs::msg::Header::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_stamp;
    dcdr >> m_frame_id;
}

size_t std_msgs::msg::Header::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            



    return current_align;
}

bool std_msgs::msg::Header::isKeyDefined()
{
    return false;
}

void std_msgs::msg::Header::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
}

