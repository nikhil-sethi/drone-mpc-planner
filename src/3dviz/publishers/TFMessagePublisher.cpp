// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file TFMessagePublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/publisher/Publisher.h>
#include <fastrtps/attributes/PublisherAttributes.h>

#include <fastrtps/Domain.h>

#include <fastrtps/utils/eClock.h>

#include "TFMessagePublisher.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

TFMessagePublisher::TFMessagePublisher() : mp_participant(nullptr), mp_publisher(nullptr) {}

TFMessagePublisher::~TFMessagePublisher() {	Domain::removeParticipant(mp_participant);}

bool TFMessagePublisher::init()
{
    ParticipantAttributes PParam;
    PParam.rtps.builtin.domainId = 0;
    PParam.rtps.builtin.leaseDuration = c_TimeInfinite;
    PParam.rtps.setName("Participant_publisher2");  //You can put here the name you want
    mp_participant = Domain::createParticipant(PParam);

    if(mp_participant == nullptr)
    {
        return false;
    }

    Domain::registerType(mp_participant, static_cast<TopicDataType*>(&myType));

    PublisherAttributes Wparam;
    Wparam.topic.topicKind = NO_KEY;
    Wparam.topic.topicDataType = myType.getName();  //This type MUST be registered

    Wparam.topic.topicName = "rt/tf";
    mp_publisher = Domain::createPublisher(mp_participant,Wparam,static_cast<PublisherListener*>(&m_listener));

    Wparam.topic.topicName = "rt/tf_static";
    mp_publisher_static = Domain::createPublisher(mp_participant,Wparam,static_cast<PublisherListener*>(&m_listener));

    if(mp_publisher == nullptr)
    {
        return false;
    }

    return true;
}

void TFMessagePublisher::PubListener::onPublicationMatched(Publisher* pub,MatchingInfo& info)
{
    (void)pub;

    if (info.status == MATCHED_MATCHING)
    {
        n_matched++;
        std::cout << "Publisher matched" << std::endl;
    }
    else
    {
        n_matched--;
        std::cout << "Publisher unmatched" << std::endl;
    }
}

void TFMessagePublisher::run()
{
    tf2_msgs::msg::TFMessage st;
    tf2_msgs::msg::TFMessage st_static;

    st.transforms(transforms);
    st_static.transforms(transforms_static);

    mp_publisher->write(&st);
    mp_publisher_static->write(&st_static);
}

void TFMessagePublisher::add_transform(double trans_x, double trans_y, double trans_z,
                                       double rot_x, double rot_y, double rot_z, double rot_w,
                                       int64_t time, std::string source, std::string target, bool is_static)
{
    geometry_msgs::msg::TransformStamped transform;
    std_msgs::msg::Header header;
    builtin_interfaces::msg::Time t;
    geometry_msgs::msg::Transform tf;
    geometry_msgs::msg::Vector3 m_translation;
    geometry_msgs::msg::Quaternion m_rotation;

    t.sec(static_cast<int32_t>(time / 1e9l));
    t.nanosec(static_cast<uint32_t>(time % static_cast<int64_t>(1e9)));

    m_translation.x(trans_x);
    m_translation.y(trans_y);
    m_translation.z(trans_z);
    m_rotation.x(rot_x);
    m_rotation.y(rot_y);
    m_rotation.z(rot_z);
    m_rotation.w(rot_w);

    tf.translation(m_translation);
    tf.rotation(m_rotation);

    header.frame_id(source);
    header.stamp(t);
    transform.child_frame_id(target);
    transform.header(header);
    transform.transform(tf);

    if (is_static)
        transforms_static.push_back(transform);
    else
        transforms.push_back(transform);
}

void TFMessagePublisher::clear_transforms()
{
    transforms.clear();
}

