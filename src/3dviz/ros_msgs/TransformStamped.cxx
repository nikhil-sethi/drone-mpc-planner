// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file TransformStamped.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "TransformStamped.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

geometry_msgs::msg::TransformStamped::TransformStamped()
{




}

geometry_msgs::msg::TransformStamped::~TransformStamped()
{
}

geometry_msgs::msg::TransformStamped::TransformStamped(const TransformStamped &x)
{
    m_header = x.m_header;
    m_child_frame_id = x.m_child_frame_id;
    m_transform = x.m_transform;
}

geometry_msgs::msg::TransformStamped::TransformStamped(TransformStamped &&x)
{
    m_header = std::move(x.m_header);
    m_child_frame_id = std::move(x.m_child_frame_id);
    m_transform = std::move(x.m_transform);
}

geometry_msgs::msg::TransformStamped& geometry_msgs::msg::TransformStamped::operator=(const TransformStamped &x)
{
    m_header = x.m_header;
    m_child_frame_id = x.m_child_frame_id;
    m_transform = x.m_transform;

    return *this;
}

geometry_msgs::msg::TransformStamped& geometry_msgs::msg::TransformStamped::operator=(TransformStamped &&x)
{
    m_header = std::move(x.m_header);
    m_child_frame_id = std::move(x.m_child_frame_id);
    m_transform = std::move(x.m_transform);

    return *this;
}

size_t geometry_msgs::msg::TransformStamped::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += std_msgs::msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += geometry_msgs::msg::Transform::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t geometry_msgs::msg::TransformStamped::getCdrSerializedSize(const geometry_msgs::msg::TransformStamped& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.child_frame_id().size() + 1;

    current_alignment += geometry_msgs::msg::Transform::getCdrSerializedSize(data.transform(), current_alignment);

    return current_alignment - initial_alignment;
}

void geometry_msgs::msg::TransformStamped::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_header;
    scdr << m_child_frame_id;
    scdr << m_transform;
}

void geometry_msgs::msg::TransformStamped::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_header;
    dcdr >> m_child_frame_id;
    dcdr >> m_transform;
}

size_t geometry_msgs::msg::TransformStamped::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            




    return current_align;
}

bool geometry_msgs::msg::TransformStamped::isKeyDefined()
{
    return false;
}

void geometry_msgs::msg::TransformStamped::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
}

