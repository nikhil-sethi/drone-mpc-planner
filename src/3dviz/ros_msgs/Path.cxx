// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file Path.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "Path.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

nav_msgs::msg::Path::Path()
{



}

nav_msgs::msg::Path::~Path()
{
}

nav_msgs::msg::Path::Path(const Path &x)
{
    m_header = x.m_header;
    m_poses = x.m_poses;
}

nav_msgs::msg::Path::Path(Path &&x)
{
    m_header = std::move(x.m_header);
    m_poses = std::move(x.m_poses);
}

nav_msgs::msg::Path& nav_msgs::msg::Path::operator=(const Path &x)
{
    m_header = x.m_header;
    m_poses = x.m_poses;

    return *this;
}

nav_msgs::msg::Path& nav_msgs::msg::Path::operator=(Path &&x)
{
    m_header = std::move(x.m_header);
    m_poses = std::move(x.m_poses);

    return *this;
}

size_t nav_msgs::msg::Path::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += std_msgs::msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += geometry_msgs::msg::PoseStamped::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t nav_msgs::msg::Path::getCdrSerializedSize(const nav_msgs::msg::Path& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.poses().size(); ++a)
    {
        current_alignment += geometry_msgs::msg::PoseStamped::getCdrSerializedSize(data.poses().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void nav_msgs::msg::Path::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_header;
    scdr << m_poses;
}

void nav_msgs::msg::Path::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_header;
    dcdr >> m_poses;
}

size_t nav_msgs::msg::Path::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            



    return current_align;
}

bool nav_msgs::msg::Path::isKeyDefined()
{
    return false;
}

void nav_msgs::msg::Path::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
}

